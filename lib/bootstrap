#!/bin/sh
# shellcheck disable=SC1111
set -ue

# Redirect output to stderr.
exec 1>&2

GLOBAL_CONFIG_NAMESPACE="hooks"

NULL_REF=0000000000000000000000000000000000000000

random_line ()
{
    if sort --help | grep -q -- --random-sort
    then
        sort --random-sort | head -n1
    else
        # As a fallback use first line
        head -n1
    fi
}

safe_tput ()
{
    tput "$@" 2>/dev/null || :
}

test_nt ()
{
    test -n "$( find -L "$1" -prune -newer "$2" )"
}

time_ms ()
{
    # Sadly, macOS date(3) does not support %N
    perl -MTime::HiRes=time -e 'printf "%d\n", time * 1000'
}

needs_quotes ()
{
    ! echo "$1" | grep -Eq '^[a-zA-Z0-9.,:_/=@'"'"'"!-]+$'
}

quote_if_needed ()
{
    arg="$1"
    if needs_quotes "$arg"
    then
        # FIXME This will fail if you have single quotes inside your args
        printf "'%s'" "$arg"
    else
        printf '%s' "$arg"
    fi
}

if [ -t 1 ] && [ "$( safe_tput colors )" -gt 8 ]
then
    TPUT_PRIMARY="$( safe_tput sgr0 )"
    TPUT_SECONDARY="$( safe_tput dim )"
    TPUT_ERROR="$( safe_tput setaf 1 )"
    TPUT_WARNING="$( safe_tput setaf 3 )"
    TPUT_VERY_HIGH_VALUE="$TPUT_ERROR"
    TPUT_HIGH_VALUE="$TPUT_WARNING"
else
    TPUT_PRIMARY=""
    TPUT_SECONDARY=""
    TPUT_ERROR=""
    TPUT_WARNING=""
    TPUT_VERY_HIGH_VALUE=
    TPUT_HIGH_VALUE=
fi

MS_HIGH=1500
MS_VERY_HIGH=3000

# TODO Set VERBOSITY from --verbose | -v | -vv | -vvv etc.
# TODO Add a hook that checks if --fixup=… matches anything

VERBOSITY="$( git config --get "hooks.verbosity" || echo 0)"
if [ "$VERBOSITY" -ge 9 ]
then
    set -x
fi
export VERBOSITY

HOOK_TYPE="$( basename "$0" .sh )"
export HOOK_TYPE

if [ "$HOOK_TYPE" = "commit-msg" ]
then
    COMMIT_MESSAGE="${1-}"
else
    COMMIT_MESSAGE=""
fi
export COMMIT_MESSAGE

if [ -d ".git/rebase-apply" ] || [ -d ".git/rebase-merge" ]
then
    REBASE_IN_PROGRESS=1
else
    REBASE_IN_PROGRESS=
fi
export REBASE_IN_PROGRESS

if [ -z "$HOOKS_DIR" ]
then
    echo 1>&2 "ERROR: Tried to bootstrap @saji/git-hooks without HOOKS_DIR set."
    exit 64 # EX_USAGE
fi
PACKAGE_DIR="$HOOKS_DIR"
export PACKAGE_DIR

BASE_BRANCH="$( git config --get-regexp '^branch\..*\.remote' | head -n1 | cut -d. -f2 )"
export BASE_BRANCH

# TODO Does this work for all hooks? What about post-checkout, post-rebase etc?
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    AGAINST=HEAD
else
    # Initial commit: diff against an empty tree object
    AGAINST="$( git hash-object -t tree /dev/null )"
fi
export AGAINST

XARGS_MAX_ARGS=512
if command xargs --help 2>&1 | grep -q -- --no-run-if-empty
then
    # shellcheck disable=SC2139
    alias xargs="command xargs -n $XARGS_MAX_ARGS --no-run-if-empty"
else
    # On MacOS xargs does not have that option (which is a GNU
    # extension), but acts that way by default
    # shellcheck disable=SC2139
    alias xargs="command xargs -n $XARGS_MAX_ARGS"
fi

# Commonly used to disable interactive mode
CI=true
export CI

# Signal that we want colour even if we don’t have TTY
# https://nodejs.org/api/cli.html#force_color1-2-3
if [ -z "${FORCE_COLOR-}" ]
then
    color_count="$( safe_tput colors )"
    if [ "$color_count" = 16 ]
    then
        FORCE_COLOR=1
    elif [ "$color_count" = 256 ]
    then
        FORCE_COLOR=2
    elif [ "${color_count:-0}" -gt 256 ]
    then
        FORCE_COLOR=3
    else
        FORCE_COLOR=
    fi
fi
export FORCE_COLOR

TMPDIR="${TMPDIR:-/tmp}"
export TMPDIR

PATH="./node_modules/.bin:${PATH}"
export PATH

NODE_MODULES_CHECKED=
export NODE_MODULES_CHECKED


# Figure out how git was called
PARENT_ARGV0=
PARENT_ARGV=
if [ -n "$GIT_PID" ]
then
    git_cmd_regex="(\/[a-zA-Z0-9_/-]+\/)?git"
    if [ -e "/proc/$GIT_PID/cmdline" ]
    then
        # On systems with procfs get command from there since it contains
        # words separated by null bytes, so we can restore quoting
        parent_argv0="$( cut -d '' -f1 "/proc/$GIT_PID/cmdline" )"
        if [ -n "$parent_argv0" ]
        then
            PARENT_ARGV0="$( quote_if_needed "$parent_argv0" )"
            PARENT_ARGV="$(
                cut -d '' -f2- "/proc/$GIT_PID/cmdline" |
                    sed 's/\x0*$//' |
                    tr '\0' '\n' |
                    while read -r arg
                    do
                        printf ' '
                        quote_if_needed "$arg"
                    done
            )"
        fi
    else
        # On systems without procfs get command from ps, which has quotes
        # stripped and hope for the best.
        parent_cmd="$( ps -p "$GIT_PID" -o command= )"
        if printf "%s" "$parent_cmd" | grep -qE "^${git_cmd_regex}[[:space:]]+"
        then
            PARENT_ARGV0="$( printf "%s" "$parent_cmd" | sed -E -e "s/^($git_cmd_regex).*/\\1/" )"
            PARENT_ARGV=" $( printf "%s" "$parent_cmd" | sed -E "s/^${git_cmd_regex}[[:space:]]+//" )"
        fi
        unset parent_cmd
    fi
    unset git_cmd_regex
fi


success_messages="All hooks seem happy.
You are all good.
Nice job.
Keep it up.
Everything is good with the world."


cprintf ()
{
    colour="$1"
    prefix="$2"
    fmt="$3"
    shift 3
    # shellcheck disable=SC2059
    printf "${colour}${prefix}${fmt}${TPUT_PRIMARY}\n" "$@"
}

error ()
{
    cprintf "$TPUT_ERROR" "ERROR: " "$@" 1>&2
}

warning ()
{
    cprintf "$TPUT_WARNING" "WARNING: " "$@"
}

secondary ()
{
    cprintf "$TPUT_SECONDARY" "" "$@"
}

require_node_modules ()
{
    if [ -n "$NODE_MODULES_CHECKED" ]
    then
        return
    fi
    NODE_MODULES_CHECKED=1

    lock_file=
    npm_bin=
    if [ -e "package-lock.json" ]
    then
        lock_file=package-lock.json
        npm_bin=npm
    elif [ -e "yarn.lock" ]
    then
        lock_file=yarn.lock
        npm_bin=yarn
    fi

    if
        [ -n "$lock_file" ] &&
        test_nt "$lock_file" "node_modules"
    then
        "$npm_bin" install
    fi
}

is_enabled ()
{
    config_name="$1"
    test "$( git config --get "$config_name" || echo true )" != "false"
}

run_hooks ()
{
    if ! is_enabled "$GLOBAL_CONFIG_NAMESPACE.enabled"
    then
        return
    fi

    # During rebase, hooks hooks are being run with “Rebasing (X/Y)” on
    # printed and cursor at the beginning of the line
    if [ -n "$REBASE_IN_PROGRESS" ] && [ "$VERBOSITY" -ge 0 ]
    then
        printf '\n'
    fi

    dir="$PACKAGE_DIR/$HOOK_TYPE.d"
    pattern="^$( git config --get "$GLOBAL_CONFIG_NAMESPACE.pattern" || echo '.*')$"
    # TODO Support global hooks in ~/.config/githooks (overwritable in git config)
    # TODO Support local hooks in ./.githooks (overwritable in git config)
    find "$dir" -maxdepth 1 -type f | sort |
        while read -r hook
        do
            # TODO Use git-notes to store hooks ran for given commit and not re–run it
            #      This way we can have linting in both commit and push and it  will run only for commit (unless it’s skipped there)
            #      Probably use core.notesRef=refs/notes/hooks and `- [x] hook name`

            if [ -x "$hook" ]
            then
                name="$( basename "$hook" .sh  | sed 's/^[0-9_ -]*//' )"
                CONFIG_NAMESPACE="$GLOBAL_CONFIG_NAMESPACE.$name"
                enabled_shorthand_config_name="$CONFIG_NAMESPACE"
                if
                  echo "$name" | grep -q "$pattern"
                then
                    if [ "$VERBOSITY" -ge 1 ]
                    then
                        secondary "$name"
                    fi

                    if
                      ! is_enabled "$CONFIG_NAMESPACE.enabled" ||
                      ! is_enabled "$enabled_shorthand_config_name"
                    then
                        if [ "$VERBOSITY" -ge 2 ]
                        then
                            secondary "→ disabled"
                        fi
                    else
                        start_ms=$( time_ms )

                        export GLOBAL_CONFIG_NAMESPACE CONFIG_NAMESPACE
                        export NULL_REF
                        # shellcheck disable=SC1090
                        if ! ( . "$hook" )
                        then
                            error "%s “%s” hook failed" "$HOOK_TYPE" "$name"
                            # TODO Hmm… maybe also skip checks that already passed?
                            if [ -z "$PARENT_ARGV0" ]
                            then
                                secondary "To temporary disable add this directly after \`git\`:\n    -c %s=false " "$enabled_shorthand_config_name"
                            else
                                secondary "To temporary disable run:\n    %s -c %s=false%s" "$PARENT_ARGV0" "$enabled_shorthand_config_name" "$PARENT_ARGV"
                            fi
                            false
                        fi

                        end_ms=$( time_ms )
                        if [ "$VERBOSITY" -ge 2 ]
                        then
                            duration_ms=$(( end_ms - start_ms ))
                            if [ $duration_ms != 0 ]
                            then
                                if [ "$duration_ms" -gt "$MS_VERY_HIGH" ]
                                then
                                    duration_color="$TPUT_VERY_HIGH_VALUE"
                                elif [ "$duration_ms" -gt "$MS_HIGH" ]
                                then
                                    duration_color="$TPUT_HIGH_VALUE"
                                else
                                    duration_color=
                                fi
                                printf "${TPUT_SECONDARY}→ took ${duration_color}%.3fs${TPUT_PRIMARY}${TPUT_SECONDARY}.${TPUT_PRIMARY}\n" "${duration_ms}e-3"
                            fi
                        fi

                    fi
                fi
            fi
        done

    if [ "$VERBOSITY" -ge 0 ]
    then
        printf '✅ '
        echo "$success_messages" | random_line
    fi
}
