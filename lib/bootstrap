#!/bin/sh
# shellcheck disable=SC1111
set -ue

# Redirect output to stderr.
exec 1>&2

GLOBAL_CONFIG_NAMESPACE="hooks"

tput ()
{
    command tput "$@" 2>/dev/null || :
}

if [ -t 1 ] && [ "$( tput colors )" -gt 8 ]
then
    TPUT_PRIMARY="$( tput sgr0 )"
    TPUT_SECONDARY="$( tput dim )"
    TPUT_ERROR="$( tput setaf 1 )"
    TPUT_WARNING="$( tput setaf 3 )"
else
    TPUT_PRIMARY=""
    TPUT_SECONDARY=""
    TPUT_ERROR=""
    TPUT_WARNING=""
fi

# TODO Set VERBOSITY from --verbose | -v | -vv | -vvv etc.
# TODO Add a hook that checks if --fixup=… matches anything

VERBOSITY="$( git config --get --type=int "hooks.verbosity" || echo 0 )"
if [ "$VERBOSITY" -gt 2 ]
then
    set -x
fi
export VERBOSITY

PACKAGE_DIR="$( dirname "$( readlink "$0" )" )/.."
export PACKAGE_DIR

BASE_BRANCH="$( git config --get-regexp '^branch\..*\.remote' | head -n1 | cut -d. -f2 )"
export BASE_BRANCH

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    AGAINST=HEAD
else
    # Initial commit: diff against an empty tree object
    AGAINST="$( git hash-object -t tree /dev/null )"
fi
export AGAINST

XARGS_MAX_ARGS=512
if command xargs --help | grep -q -- --no-run-if-empty
then
    # shellcheck disable=SC2139
    alias xargs="command xargs -n $XARGS_MAX_ARGS --no-run-if-empty"
else
    # On MacOS xargs does not have that option (which is a GNU
    # extension), but acts that way by default
    # shellcheck disable=SC2139
    alias xargs="command xargs -n $XARGS_MAX_ARGS"
fi

# Commonly used to disable interactive mode
CI=true
export CI


success_messages="All hooks seem happy.
You are all good.
Nice job.
Keep it up.
Everything is good with the world."


cprintf ()
{
    colour="$1"
    prefix="$2"
    fmt="$3"
    shift 3
    # shellcheck disable=SC2059
    printf "${colour}${prefix}${fmt}${TPUT_PRIMARY}\n" "$@"
}

error ()
{
    cprintf "$TPUT_ERROR" "ERROR: " "$@" 1>&2
}

warning ()
{
    cprintf "$TPUT_WARNING" "WARNING: " "$@"
}

secondary ()
{
    cprintf "$TPUT_SECONDARY" "" "$@"
}

run_hooks ()
{
    hook_type="$( basename "$0" .sh )"
    dir="$PACKAGE_DIR/$hook_type.d"
    # TODO Support global hooks in ~/.config/githooks (overwritable in git config)
    # TODO Support local hooks in ./.githooks (overwritable in git config)
    find "$dir" -maxdepth 1 -type f | sort |
        while read -r hook
        do
            if [ -x "$hook" ]
            then
                name="$( basename "$hook" .sh  | sed 's/^[0-9_ -]*//' )"
                CONFIG_NAMESPACE="$GLOBAL_CONFIG_NAMESPACE.$name"
                enabled_config_name="$CONFIG_NAMESPACE.enabled"
                enabled_shorthand_config_name="$CONFIG_NAMESPACE"
                if
                    [ "$( git config --get --type=bool --default=true "$enabled_shorthand_config_name" )" != "false" ] &&
                    [ "$( git config --get --type=bool --default=true "$enabled_config_name" )" != "false" ]
                then
                    if [ "$VERBOSITY" -gt 0 ]
                    then
                        secondary "$name"
                    fi

                    export GLOBAL_CONFIG_NAMESPACE CONFIG_NAMESPACE
                    # shellcheck disable=SC1090
                    if ! ( . "$hook" )
                    then
                        error "%s “%s” hook failed" "$hook_type" "$name"
                        secondary "To disable, run with:\n    -c %s=false " "$enabled_shorthand_config_name"
                        false
                    fi
                fi
            fi
        done
    if [ "$VERBOSITY" -gt -1 ]
    then
        printf '✅ '
        echo "$success_messages" | sort -R | head -n1
    fi
}
